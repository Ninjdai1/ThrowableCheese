plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

tasks.register("multiplatformDatagen") {
    Project common = project(":common")
    Project fabric = project(":fabric")
    Project forge = project(":forge")
    dependsOn project(":fabric").tasks.named("runDatagen")
    // Copy the fabric only recipes to the generated resources
    File fabricDir = fabric.file("src/main/generated/data/throwablecheese/recipes/")
    File forgeDir = forge.file("src/main/generated/data/throwablecheese/recipes/")

    delete(fabricDir)
    delete(forgeDir)

    copy {
        from common.file("src/main/generated/data/throwablecheese/recipes/.fabric")
        include "**/*.json"
        into fabric.file("src/main/generated/data/throwablecheese/recipes/")
    }
    // Copy the forge only recipes to the generated resources
    copy {
        from common.file("src/main/generated/data/throwablecheese/recipes/.forge")
        include "**/*.json"
        into forge.file("src/main/generated/data/throwablecheese/recipecs/")
    }
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        repositories {
            exclusiveContent {
                forRepository {
                    maven {
                        name = "Modrinth"
                        url = "https://api.modrinth.com/maven"
                    }
                }
                filter {
                    includeGroup "maven.modrinth"
                }
                maven {
                    name = "Jared's maven"
                    url = "https://maven.blamejared.com/"
                }
            }
            mavenCentral()
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            }
            maven {
                name "terraform wood api, trinkets"
                url "https://maven.terraformersmc.com"
            }
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
        }
    }
}


publishMods {
    changelog = file("CHANGELOG.md").text.replace("@VERSION@", rootProject.mod_version)
    type = STABLE

    def optionsCurseforge = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        minecraftVersions.add("1.20.1")
        projectId = "1065633"
        requires {
            slug = "architectury-api"
        }
        requires {
            slug = "lets-do-meadow"
        }
    }

    def optionsModrinth = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        projectId = "mmxlzX6T"
        minecraftVersions.add("1.20.1")
        requires {
            slug = "architectury-api"
        }
        requires {
            slug = "lets-do-meadow"
        }
    }

    curseforge("curseforgeFabric") {
        from optionsCurseforge
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "[Let's Do Addon] ThrowableCheese ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"
    }

    curseforge("curseforgeForge") {
        from optionsCurseforge
        modLoaders.add("forge")
        modLoaders.add("neoforge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "[Let's Do Addon] ThrowableCheese ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
    }

    modrinth("modrinthFabric") {
        from optionsModrinth
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "[Let's Do Addon] ThrowableCheese ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"

        additionalFiles.from(project(":fabric").tasks.named("remapSourcesJar").get().archiveFile)
    }

    modrinth("modrinthForge") {
        from optionsModrinth
        modLoaders.add("forge")
        modLoaders.add("neoforge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "[Let's Do Addon] ThrowableCheese ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
    }

    additionalFiles.from(project(":forge").tasks.named("remapSourcesJar").get().archiveFile)
}
